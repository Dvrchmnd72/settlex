from django.shortcuts import render, redirect
from django.contrib import messages
from django.core.mail import send_mail
import logging

# Set up logger
logger = logging.getLogger(__name__)

# Home View
def home(request):
    logger.info(f"Home page accessed by {request.user} from host: {request.get_host()}")
    return render(request, 'settlements_app/home.html')

# Dashboard View
def dashboard(request):
    logger.info(f"Dashboard page accessed by {request.user} from host: {request.get_host()}")
    return render(request, 'settlements_app/dashboard.html')

# New Instruction View
def new_instruction(request):
    if request.method == 'POST':
        # Process form data based on the selected type
        settlement_type = request.POST.get('settlementType')
        logger.info(f"New instruction of type '{settlement_type}' received from {request.user}.")

        # Extract data specific to the chosen settlement type
        if settlement_type == 'purchase':
            purchaser_name = request.POST.get('purchaser_name')
            purchaser_mobile = request.POST.get('purchaser_mobile')
            
            # Save the data or perform other actions
            messages.success(request, f"Purchase instruction for {purchaser_name} submitted successfully!")
            logger.info(f"Purchase instruction submitted for {purchaser_name} (Mobile: {purchaser_mobile}).")
            
            # Send an email notification
            send_mail(
                'New Instruction Submitted',
                f'A new purchase instruction has been submitted by {purchaser_name} (Mobile: {purchaser_mobile}).',
                'info@onestoplegal.com.au',  # Sender email
                ['info@onestoplegal.com.au'],  # Recipient email
                fail_silently=False,
            )
            logger.info(f"Email notification sent for new purchase instruction for {purchaser_name}.")

        elif settlement_type == 'sale':
            # Handle Sale specific fields
            logger.info("Sale instruction submitted.")
            pass
        elif settlement_type == 'lodge_mortgage':
            # Handle Lodge Mortgage specific fields
            logger.info("Lodge mortgage instruction submitted.")
            pass
        elif settlement_type == 'discharge_mortgage':
            # Handle Discharge Mortgage specific fields
            logger.info("Discharge mortgage instruction submitted.")
            pass

        return redirect('dashboard')
    
    return render(request, 'settlements_app/new_instruction.html')

# View Instructions (Placeholder)
def view_instructions(request):
    instructions = []  # Replace with actual logic to fetch instructions from the database
    logger.info(f"Viewing instructions by {request.user}. Total instructions: {len(instructions)}.")
    return render(request, 'settlements_app/view_instructions.html', {'instructions': instructions})

# Register Solicitor View
def register_solicitor(request):
    if request.method == 'POST':
        user_form = SolicitorRegistrationForm(request.POST)
        details_form = SolicitorDetailsForm(request.POST)
        
        if user_form.is_valid() and details_form.is_valid():
            user = user_form.save()
            user.set_password(user.password)
            user.save()
            
            solicitor_details = details_form.save(commit=False)
            solicitor_details.user = user
            solicitor_details.save()
            
            # Log the user in and redirect to their dashboard
            login(request, user)
            logger.info(f"Solicitor {user.username} registered and logged in successfully.")
            return redirect('solicitor_dashboard')
        else:
            logger.warning(f"Solicitor registration failed for {request.POST.get('username')}. Invalid form data.")
    else:
        user_form = SolicitorRegistrationForm()
        details_form = SolicitorDetailsForm()
    
    return render(request, 'settlements_app/register.html', {'user_form': user_form, 'details_form': details_form})

# Solicitor Dashboard View
def solicitor_dashboard(request):
    # Fetch instructions specific to the logged-in solicitor
    instructions = Instruction.objects.filter(solicitor__user=request.user)
    logger.info(f"Solicitor dashboard accessed by {request.user}. Total instructions: {len(instructions)}.")
    return render(request, 'settlements_app/dashboard.html', {'instructions': instructions})